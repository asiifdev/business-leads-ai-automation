const readline = require('readline');
const fs = require('fs');
const path = require('path');
const OpenAI = require('openai');

class SetupWizard {
    constructor() {
        this.rl = readline.createInterface({
            input: process.stdin,
            output: process.stdout
        });
        this.config = {};
    }

    async start() {
        console.log('🚀 Welcome to Business Leads AI Automation Setup!\n');
        console.log('Let\'s get you started in just a few minutes...\n');
        
        await this.configureAPI();
        await this.selectIndustry();
        await this.selectBusinessType();
        await this.testConnection();
        await this.saveConfiguration();
        await this.runSampleCampaign();
        
        console.log('\n🎉 Setup complete! You\'re ready to generate leads.');
        console.log('Run: npm run campaign to start your first campaign\n');
        
        this.rl.close();
    }

    async configureAPI() {
        console.log('📋 Step 1: API Configuration');
        console.log('─'.repeat(40));
        
        const apiKey = await this.question('Enter your OpenAI API Key: ');
        
        if (!apiKey || apiKey.length < 20) {
            console.log('❌ Invalid API key. Please get one from: https://platform.openai.com/');
            process.exit(1);
        }
        
        // Test API key
        try {
            const openai = new OpenAI({ apiKey });
            await openai.models.list();
            console.log('✅ API key validated successfully!\n');
            this.config.OPENAI_API_KEY = apiKey;
        } catch (error) {
            console.log('❌ API key test failed:', error.message);
            process.exit(1);
        }
    }

    async selectIndustry() {
        console.log('🎯 Step 2: Industry Focus');
        console.log('─'.repeat(40));
        console.log('Select your primary target industry:');
        console.log('1. 🍽️  Restaurant & Food Service');
        console.log('2. 🚗 Automotive (Rental, Workshop)');
        console.log('3. 🛍️  Retail & E-commerce');
        console.log('4. 💼 Professional Services');
        console.log('5. 🏥 Healthcare');
        console.log('6. 🎓 Education');
        console.log('7. 🏠 Real Estate');
        console.log('8. 🔧 Other/Custom');
        
        const choice = await this.question('\nSelect option (1-8): ');
        
        const industries = {
            '1': 'restaurant',
            '2': 'automotive', 
            '3': 'retail',
            '4': 'professional',
            '5': 'healthcare',
            '6': 'education',
            '7': 'realestate',
            '8': 'custom'
        };
        
        this.config.PRIMARY_INDUSTRY = industries[choice] || 'custom';
        console.log(`✅ Industry set to: ${this.config.PRIMARY_INDUSTRY}\n`);
    }

    async selectBusinessType() {
        console.log('🎨 Step 3: Campaign Style');
        console.log('─'.repeat(40));
        console.log('Choose your outreach approach:');
        console.log('1. 🤝 Conservative (respectful, professional)');
        console.log('2. ⚖️  Balanced (standard business outreach)');
        console.log('3. 🚀 Aggressive (high-volume, direct)');
        
        const choice = await this.question('\nSelect approach (1-3): ');
        
        const approaches = {
            '1': 'conservative',
            '2': 'balanced',
            '3': 'aggressive'
        };
        
        this.config.CAMPAIGN_STYLE = approaches[choice] || 'balanced';
        console.log(`✅ Campaign style: ${this.config.CAMPAIGN_STYLE}\n`);
    }

    async testConnection() {
        console.log('🧪 Step 4: Testing Connection');
        console.log('─'.repeat(40));
        console.log('Testing your configuration...\n');
        
        this.showProgress('Validating API connection', 0);
        await this.delay(1000);
        this.showProgress('Validating API connection', 50);
        await this.delay(1000);
        this.showProgress('Validating API connection', 100);
        
        console.log('\n✅ All systems ready!\n');
    }

    async saveConfiguration() {
        console.log('💾 Step 5: Saving Configuration');
        console.log('─'.repeat(40));
        
        // Create .env file
        const envContent = `# Business Leads AI Automation Configuration
# Generated by Setup Wizard

OPENAI_API_KEY=${this.config.OPENAI_API_KEY}
OPENAI_MODEL=gpt-4o-mini
PRIMARY_INDUSTRY=${this.config.PRIMARY_INDUSTRY}
CAMPAIGN_STYLE=${this.config.CAMPAIGN_STYLE}

# Optional Configuration
DELAY_BETWEEN_SCRAPES=2000
MAX_RETRIES=3
OUTPUT_FORMAT=csv
DEFAULT_RESULT_LIMIT=20
`;

        fs.writeFileSync('.env', envContent);
        
        // Create user preferences file
        const prefsContent = {
            industry: this.config.PRIMARY_INDUSTRY,
            campaignStyle: this.config.CAMPAIGN_STYLE,
            setupDate: new Date().toISOString(),
            version: '2.0.0'
        };
        
        fs.writeFileSync('user-preferences.json', JSON.stringify(prefsContent, null, 2));
        
        console.log('✅ Configuration saved successfully!\n');
    }

    async runSampleCampaign() {
        const runSample = await this.question('🎯 Would you like to run a sample campaign? (y/n): ');
        
        if (runSample.toLowerCase() === 'y' || runSample.toLowerCase() === 'yes') {
            console.log('\n🚀 Running sample campaign...');
            
            const sampleQueries = {
                restaurant: 'Restaurant Jakarta',
                automotive: 'Rental mobil Jakarta', 
                retail: 'Toko online Jakarta',
                professional: 'Konsultan Jakarta',
                healthcare: 'Klinik Jakarta',
                education: 'Kursus Jakarta',
                realestate: 'Property Jakarta',
                custom: 'Bisnis Jakarta'
            };
            
            const query = sampleQueries[this.config.PRIMARY_INDUSTRY];
            console.log(`Sample query: "${query}"`);
            console.log('Limit: 3 results (for testing)\n');
            
            // Show sample progress
            for (let i = 0; i <= 100; i += 20) {
                this.showProgress('Sample campaign', i);
                await this.delay(500);
            }
            
            console.log('\n✅ Sample campaign completed! Check output/ folder for results.\n');
        }
    }

    showProgress(task, percentage) {
        const width = 30;
        const filled = Math.round(width * percentage / 100);
        const empty = width - filled;
        const bar = '█'.repeat(filled) + '░'.repeat(empty);
        
        process.stdout.write(`\r${task}: ${bar} ${percentage}%`);
        
        if (percentage === 100) {
            console.log(''); // New line when complete
        }
    }

    question(prompt) {
        return new Promise((resolve) => {
            this.rl.question(prompt, resolve);
        });
    }

    delay(ms) {
        return new Promise(resolve => setTimeout(resolve, ms));
    }
}

// Export for use in package.json scripts
if (require.main === module) {
    const wizard = new SetupWizard();
    wizard.start().catch(console.error);
}

module.exports = SetupWizard;